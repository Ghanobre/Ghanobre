name: Testes Mobile com Robot

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  robot-tests:
    runs-on: self-hosted

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Export env for job
        run: |
          echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_AVD_HOME=$HOME/.android/avd" >> $GITHUB_ENV
          echo "PATH=$HOME/android-sdk/cmdline-tools/latest/bin:$HOME/android-sdk/platform-tools:$HOME/android-sdk/emulator:$HOME/.npm-global/bin:$HOME/.local/bin:$PATH" >> $GITHUB_ENV

      - name: Start Android emulator (WSL safe + espera reforçada)
        shell: bash
        run: |
          # Inicie o AVD (ajuste o nome se quiser usar 'test' em vez de 'test29')
          nohup "$ANDROID_HOME/emulator/emulator" -avd test29 \
            -no-window -no-audio \
            -gpu swiftshader_indirect \
            -no-snapshot -wipe-data \
            -accel off \
            -no-boot-anim \
            >/tmp/emulator.log 2>&1 &

          adb start-server
          adb wait-for-device

          # Espera 1: boot concluído (3 sinais possíveis), até 10 minutos
          for i in {1..600}; do
            bootanim="$(adb shell getprop init.svc.bootanim 2>/dev/null || true)"
            dev_boot="$(adb shell getprop dev.bootcomplete 2>/dev/null || true)"
            sys_boot="$(adb shell getprop sys.boot_completed 2>/dev/null || true)"
            if echo "$bootanim" | grep -q "stopped" || [ "$dev_boot" = "1" ] || [ "$sys_boot" = "1" ]; then
              echo "Boot (fase 1) concluído."
              break
            fi
            echo "aguardando boot (fase 1)..."
            sleep 1
          done

          # Espera 2: serviços core do system_server (activity e package), até 5 minutos
          for i in {1..300}; do
            if adb shell service list 2>/dev/null | grep -q " activity:" && \
               adb shell service list 2>/dev/null | grep -q " package:"; then
              echo "Serviços core OK (activity/package)."
              break
            fi
            echo "aguardando serviços core (activity/package)..."
            sleep 1
          done

          # Espera 3: tentar 'settings' (tolerante; até 2 minutos). Se não aparecer, seguimos assim mesmo.
          settings_ok="no"
          for i in {1..120}; do
            if adb shell service list 2>/dev/null | grep -q " settings:"; then
              echo "Serviço 'settings' disponível."
              settings_ok="yes"
              break
            fi
            echo "aguardando serviço settings (tolerante)..."
            sleep 1
          done
          if [ "$settings_ok" != "yes" ]; then
            echo "WARNING: serviço 'settings' não listado; prosseguindo mesmo assim."
          fi

          # Desbloquear e reduzir animações (não falha o job se der erro)
          adb shell input keyevent 82 || true
          adb shell settings put global window_animation_scale 0 || true
          adb shell settings put global transition_animation_scale 0 || true
          adb shell settings put global animator_duration_scale 0 || true

          echo "Emulador pronto!"
          # Sanity checks (não falham o job)
          adb shell getprop ro.build.version.release || true
          adb shell pm list packages | head -n 5 || true

      - name: Start Appium
        shell: bash
        run: |
          nohup appium --base-path /wd/hub --port 4723 >/tmp/appium.log 2>&1 &
          echo "Aguardando o Appium iniciar..."
          for i in {1..60}; do
            if curl -sf http://127.0.0.1:4723/wd/hub/status | grep -q "\"ready\": *true"; then
              echo "Appium está rodando!"
              break
            fi
            echo "Esperando Appium..."
            sleep 1
          done

      - name: Run Robot tests
        run: |
          mkdir -p results
          # chama o Robot no MESMO Python configurado acima
          python -m robot --timestampoutputs -d results tests/home.robot

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: robot-results
          path: results/

      - name: Show logs
        if: always()
        run: |
          echo "=== emulator.log (tail) ==="; tail -n 200 /tmp/emulator.log || true
          echo "=== appium.log (tail) ==="; tail -n 200 /tmp/appium.log || true

      - name: Cleanup
        if: always()
        run: |
          pkill -f "appium" || true
          adb emu kill || true
          pkill -f "emulator-" || true