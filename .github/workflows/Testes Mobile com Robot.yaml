name: Testes Mobile com Robot

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  robot-tests:
    runs-on: self-hosted

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # (Recomendado) Garante Python e libs no MESMO interpretador do job
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Instalar dependências Python
        run: |
          python -m pip install -U pip
          python -m pip install robotframework robotframework-appiumlibrary Appium-Python-Client robotframework-pythonlibcore

      - name: Export env for job
        run: |
          echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_AVD_HOME=$HOME/.android/avd" >> $GITHUB_ENV
          echo "PATH=$HOME/android-sdk/cmdline-tools/latest/bin:$HOME/android-sdk/platform-tools:$HOME/android-sdk/emulator:$HOME/.npm-global/bin:$HOME/.local/bin:$PATH" >> $GITHUB_ENV

      - name: Start Android emulator (WSL safe + espera simples)
        shell: bash
        run: |
          # Inicie o AVD (ajuste para 'test' se preferir)
          nohup "$ANDROID_HOME/emulator/emulator" -avd test29 \
            -no-window -no-audio \
            -gpu swiftshader_indirect \
            -no-snapshot -wipe-data \
            -accel off \
            -no-boot-anim \
            >/tmp/emulator.log 2>&1 &

          adb start-server
          adb wait-for-device

          # Espera de boot (apenas sinais clássicos) - até 10 minutos
          for i in {1..600}; do
            bootanim="$(adb shell getprop init.svc.bootanim 2>/dev/null || true)"
            dev_boot="$(adb shell getprop dev.bootcomplete 2>/dev/null || true)"
            sys_boot="$(adb shell getprop sys.boot_completed 2>/dev/null || true)"
            if echo "$bootanim" | grep -q "stopped" || [ "$dev_boot" = "1" ] || [ "$sys_boot" = "1" ]; then
              echo "Boot concluído."
              break
            fi
            echo "aguardando boot..."
            sleep 1
          done

          # Desbloquear e reduzir animações (não falha o job se der erro)
          adb shell input keyevent 82 || true
          adb shell settings put global window_animation_scale 0 || true
          adb shell settings put global transition_animation_scale 0 || true
          adb shell settings put global animator_duration_scale 0 || true

          echo "Emulador pronto!"
          # Sanity checks (não falham o job)
          adb shell getprop ro.build.version.release || true
          adb shell pm list packages | head -n 5 || true

      - name: Start Appium
        shell: bash
        run: |
          nohup appium --base-path /wd/hub --port 4723 >/tmp/appium.log 2>&1 &
          echo "Aguardando o Appium iniciar..."
          for i in {1..60}; do
            if curl -sf http://127.0.0.1:4723/wd/hub/status | grep -q "\"ready\": *true"; then
              echo "Appium está rodando!"
              break
            fi
            echo "Esperando Appium..."
            sleep 1
          done

      - name: Run Robot tests
        run: |
          mkdir -p results
          # chama o Robot no MESMO Python configurado acima
          python -m robot --timestampoutputs -d results tests/home.robot

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: robot-results
          path: results/

      - name: Show logs
        if: always()
        run: |
          echo "=== emulator.log (tail) ==="; tail -n 200 /tmp/emulator.log || true
          echo "=== appium.log (tail) ==="; tail -n 200 /tmp/appium.log || true

      - name: Cleanup
        if: always()
        run: |
          pkill -f "appium" || true
          adb emu kill || true
          pkill -f "emulator-" || true
